// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package wire

import (
	"github.com/golang/mock/gomock"
	"github.com/khoerling/flux/api/lib/auth"
	"github.com/khoerling/flux/api/lib/db/firebase_db"
	"github.com/khoerling/flux/api/lib/db/mock_db"
	"github.com/khoerling/flux/api/lib/encryption"
	"github.com/khoerling/flux/api/lib/integration_t_manager"
	"github.com/khoerling/flux/api/lib/integrations/firestore"
	"github.com/khoerling/flux/api/lib/integrations/sendemail/mock_sendemail"
	"github.com/khoerling/flux/api/lib/integrations/wyre/mock_wyre"
	"github.com/khoerling/flux/api/lib/server"
	"github.com/onsi/ginkgo"
	"testing"
)

// Injectors from wire.go:

func InitializeTestManager() (integration_t_manager.Manager, error) {
	fireProjectID, err := firestore.ProvideFirestoreProjectID()
	if err != nil {
		return integration_t_manager.Manager{}, err
	}
	client, err := firestore.ProvideFirestore(fireProjectID)
	if err != nil {
		return integration_t_manager.Manager{}, err
	}
	config, err := encryption.ProvideConfig()
	if err != nil {
		return integration_t_manager.Manager{}, err
	}
	manager, err := encryption.NewManager(config)
	if err != nil {
		return integration_t_manager.Manager{}, err
	}
	db := firebase_db.Db{
		Firestore:         client,
		EncryptionManager: manager,
	}
	integration_t_managerManager := integration_t_manager.Manager{
		Db: db,
	}
	return integration_t_managerManager, nil
}

func InitializeMockDBJwtVerifier(t *testing.T) auth.JwtVerifier {
	privateKey := auth.ProvideTestJwtPrivateKey()
	publicKey := auth.ProvideJwtPublicKey(privateKey)
	controller := gomock.NewController(t)
	mockDb := mock_db.NewMockDb(controller)
	jwtVerifier := auth.JwtVerifier{
		PublicKey: publicKey,
		Db:        mockDb,
	}
	return jwtVerifier
}

func InitializeMockServer(t ginkgo.GinkgoTInterface) (*server.Server, error) {
	controller := gomock.NewController(t)
	mockDb := mock_db.NewMockDb(controller)
	mockSendEmail := mock_sendemail.NewMockSendEmail(controller)
	mockClientInterface := mock_wyre.NewMockClientInterface(controller)
	serverServer := &server.Server{
		Db:        mockDb,
		SendEmail: mockSendEmail,
		Wyre:      mockClientInterface,
	}
	return serverServer, nil
}
