syntax = "proto3";
option go_package = "github.com/khoerling/flux/api/lib/protocol";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "google/protobuf/empty.proto";

// OrganizationApplication
message OrganizationApplication {
  string id = 1;
  string name = 2;
}

// User
//
// A user which is shared across customer applications
message User {
  string id = 1;
  string email = 2;
  string phone = 3;
  int64 created_at = 4;
}

// UserFlags
//
// hints for the ui
message UserFlags {
  bool has_plaid_items = 1;
  bool has_wyre_account = 2;
  bool has_wyre_payment_methods = 3;
}

// Organization
//
// an organization containing users, a user is one to many to organizations
message Organization {
  string id = 1;
  string name = 2;
  repeated User users = 3;
  repeated OrganizationApplication applications = 4;
}

// Address
//
// A user's residential address which belongs to the profile (they can have many.)
message Address {
  string id = 1;
  string street_1 = 2;
  string street_2 = 3;
  string city = 4;
  string state = 5; // (ISO 3166-1 - Alpha 2)
  string postal_code = 6;
  string country = 7; // (ISO 2)
}

// PaymentMethod
//
// A third party user account payment method (ACH, SEPA, Debit Card, Credit Card, etc.)
message PaymentMethod {
  string id = 1;
  string external_id = 2;
  string type = 3;
  string status = 4;
}

// ViewerDataRequest
//
// request
message ViewerDataRequest {}

// ViewerDataResponse
//
// response
message ViewerDataResponse {
  User user = 1;
  UserFlags flags = 2;
}

// PricingDataRequest
//
// request
message PricingDataRequest {}

// PricingRate
//
// the pricing rate map; the keys are currency symbols and the values are the rates
message PricingRate {
  map<string,float> rate = 1;
}

// PricingDataResponse
//
// response
message PricingDataResponse {
  map<string,PricingRate> rates = 1;
}

// OneTimePasscodeRequest
//
// request
message OneTimePasscodeRequest {
  string email_or_phone = 1;
}

// OneTimePasscodeResponse
//
// response
message OneTimePasscodeResponse {}

// OneTimePasscodeVerifyRequest
//
// request
message OneTimePasscodeVerifyRequest {
  string email_or_phone = 1;
  string code = 2;
}

// OneTimePasscodeVerifyResponse
//
// response
message OneTimePasscodeVerifyResponse {
  string jwt = 1;
  User user = 2;
}

// PlaidConnectBankAccountsRequest
//
// request
message PlaidConnectBankAccountsRequest {
  string plaid_public_token = 1;
  repeated string plaid_account_ids = 2;
}

// PlaidConnectBankAccountsResponse
//
// response
message PlaidConnectBankAccountsResponse {
}

// PlaidCreateLinkTokenRequest
//
// request can be empty since the link token is correlated with the Bearer token passed
message PlaidCreateLinkTokenRequest {

}

// PlaidCreateLinkTokenResponse
//
// response
message PlaidCreateLinkTokenResponse {
  string link_token = 1;
}

// WyreCreateAccountRequest
//
// request
message WyreCreateAccountRequest {
}

// WyreCreateAccountResponse
//
// response
message WyreCreateAccountResponse {

}

// SaveProfileDataRequest
//
// request
message SaveProfileDataRequest {
  string legal_name = 1;
  string date_of_birth = 2;
  string ssn = 3;
  Address address = 4;
}

// ProfileData
//
// represents all profile data for a user
message ProfileDataInfo {
  ProfileDataItemInfo legal_name = 1;
  ProfileDataItemInfo date_of_birth = 2;
  ProfileDataItemInfo ssn = 3;
  ProfileDataItemInfo address = 4;
  ProfileDataItemInfo email = 5;
  ProfileDataItemInfo phone = 6;
}

// ProfileDataInfo
//
// represents a saved profile data fields' status
message ProfileDataItemInfo {
  string                id = 1;
  ProfileDataItemKind   kind = 2;
  ProfileDataItemStatus status = 3;
  int32                 length = 4;
  string                created_at = 5;
  string                updated_at = 6;
  string                sealed_at = 7;
}

enum ProfileDataItemKind {
  K_UNKNOWN = 0;
  K_LEGAL_NAME = 1;
  K_PHONE = 2;
  K_EMAIL = 3;
  K_ADDRESS = 4;
  K_DATE_OF_BIRTH = 5;
  K_SSN = 6;
}

enum ProfileDataItemStatus {
  S_UNKNOWN = 0;
  S_RECEIVED = 1;
  S_PENDING = 2;
  S_INVALID = 3;
  S_APPROVED = 4;
}

message ChangeViewerEmailRequest {
  string code = 1;
  string email = 2;
}

message ChangeViewerPhoneRequest {
  string code = 1;
  string phone = 2;
}

service Flux {
  // Get viewer data
  //
  // Provides user (viewer) data associated with the access token
  rpc ViewerData(google.protobuf.Empty) returns (ViewerDataResponse) {
    option (google.api.http) = {
      get: "/viewer"
    };
  }

  // Get viewer profile data
  //
  // Provides user (viewer) data associated with the access token
  rpc ViewerProfileData(google.protobuf.Empty) returns (ProfileDataInfo) {
    option (google.api.http) = {
      get: "/viewer/profile"
    };
  }

  // Change users email (viewer based on jwt)
  //
  // requires an otp code and the desired email address change
  rpc ChangeViewerEmail(ChangeViewerEmailRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/viewer/email"
      body: "*"
    };
  }

  // Change users phone (viewer based on jwt)
  //
  // requires an otp code and the desired phone change
  rpc ChangeViewerPhone(ChangeViewerPhoneRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/viewer/phone"
      body: "*"
    };
  }

  // Get pricing data
  //
  // Provides pricing data for all markets with rate maps
  rpc PricingData(PricingDataRequest) returns (PricingDataResponse) {
    option (google.api.http) = {
      get: "/flux/pricing-data"
    };
  }

  // Post email or phone in exchange for a one time passcode
  //
  // Will cause your email or phone to receive a one time passcode.
  // This can be used in the verify step to obtain a token for login
  rpc OneTimePasscode(OneTimePasscodeRequest) returns (OneTimePasscodeResponse) {
    option (google.api.http) = {
      post: "/flux/auth/one-time-passcode"
      body: "*"
    };
  }

  // Post one time passcode in exchange for an access token
  //
  // The passcode received in either email or phone text message should be provided here in order to obtain on access token
  rpc OneTimePasscodeVerify(OneTimePasscodeVerifyRequest) returns (OneTimePasscodeVerifyResponse) {
    option (google.api.http) = {
      post: "/flux/auth/one-time-passcode-verify"
      body: "*"
    };
  }

  // Post chosen bank info from plaid in order to create a new ACH pyment method in wyre
  //
  // requires a plaid processor token which in turn requires a plaid widget interaction where the user selects the account id
  rpc PlaidConnectBankAccounts(PlaidConnectBankAccountsRequest) returns (PlaidConnectBankAccountsResponse) {
    option (google.api.http) = {
      post: "/plaid/connect-bank-accounts"
      body: "*"
    };
  }

  // PlaidCreateLinkToken implements the link flow
 
  // https://plaid.com/docs/link/link-token-migration-guide/
  rpc PlaidCreateLinkToken(PlaidCreateLinkTokenRequest) returns (PlaidCreateLinkTokenResponse) {
    option (google.api.http) = {
      post: "/plaid/create-link-token"
      body: "*"
    };
  }

  // SaveProfileData saves profile data items for the user
  //
  // ...
  rpc SaveProfileData(SaveProfileDataRequest) returns (ProfileDataInfo) {
    option (google.api.http) = {
      patch: "/viewer/profile"
      body: "*"
    };
  }

  // WyreCreateAccount creates an account with Wyre
  //
  // ...
  rpc WyreCreateAccount(WyreCreateAccountRequest) returns (WyreCreateAccountResponse) {
    option (google.api.http) = {
      post: "/wyre/create-account"
      body: "*"
    };
  }
}
