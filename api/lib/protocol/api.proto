syntax = "proto3";
option go_package = "github.com/khoerling/flux/api/lib/protocol";

import "google/api/annotations.proto";

// OrganizationApplication
message OrganizationApplication {
  int64 id = 1;
  string name = 2;
}

// KYCProfile
//
// A user's KYC profile (they should only have one of these)
message KYCProfile {
  int64 id = 1;
  string given_name = 2;
  string family_name = 3;
  string date_of_birth = 4; // (YYYY-MM-DD)
  string social_security_number = 5;  // (XXX-XX-XXX for US users only)
  repeated Address addresses = 6;
  repeated ThirdPartyUserAccount third_party_user_accounts = 7;
}

// User
//
// A user which is shared across customer applications
message User {
  int64 id = 1;
  string email = 2;
  string phone = 3;
  KYCProfile kyc_profile = 4;
  repeated Organization organizations = 5;
}

// Organization
//
// an organization containing users, a user is one to many to organizations
message Organization {
  int64 id = 1;
  string name = 2;
  repeated User users = 3;
  repeated OrganizationApplication applications = 4;
}

// ThirdPartyUserAccount
// 
// An object representing the user's account at a third party API
message ThirdPartyUserAccount {
  int64 id = 1;
  string partner_id = 2; // (an identifier for the third party API)
  string external_id = 3; // (an identifier for the account in the third party system)
  string credential_id = 4; // (an identifier for the user's third party credentials when available. this maps to KMS?)
  string status = 5;
  repeated PaymentMethod payment_methods = 6;
}

// Address
//
// A user's residential address which belongs to the profile (they can have many.)
message Address {
  int64 id = 1;
  bool is_default = 2;
  string street_1 = 3;
  string street_2 = 4;
  string city = 5;
  string state = 6; // (ISO 3166-1 - Alpha 2)
  string postal_code = 7;
  string country = 8; // (ISO 2)
}

// PaymentMethod
//
// A third party user account payment method (ACH, SEPA, Debit Card, Credit Card, etc.)
message PaymentMethod {
  int64 id = 1;
  string external_id = 2;
  string type = 3;
  string status = 4;
}


// UserDataRequest
//
// request
message UserDataRequest {}

// UserDataResponse
//
// response
message UserDataResponse {
  User user = 1;
}

// PricingDataRequest
//
// request
message PricingDataRequest {}

// PricingRate
//
// the pricing rate map; the keys are currency symbols and the values are the rates
message PricingRate {
  map<string,float> rate = 1;
}

// PricingDataResponse
//
// response
message PricingDataResponse {
  map<string,PricingRate> rates = 1;
}

// OneTimePasscodeRequest
//
// request
message OneTimePasscodeRequest {
  string email_or_phone = 1;
}

// OneTimePasscodeResponse
//
// response
message OneTimePasscodeResponse {}

// OneTimePasscodeVerifyRequest
//
// request
message OneTimePasscodeVerifyRequest {
  string email_or_phone = 1;
  string code = 2;
}

// OneTimePasscodeVerifyResponse
//
// response
message OneTimePasscodeVerifyResponse {
  string jwt = 1;
}

// WyreAddBankPaymentMethodRequest
//
// request
message WyreAddBankPaymentMethodRequest {

}

// WyreAddBankPaymentMethodResponse
//
// response
message WyreAddBankPaymentMethodResponse {}

service API {
  // Get user data
  //
  // Provides user data associated with the access token
  rpc UserData(UserDataRequest) returns (UserDataResponse) {
    option (google.api.http) = {
      get: "/flux/user-data"
    };
  }

  // Get pricing data
  //
  // Provides pricing data for all markets with rate maps
  rpc PricingData(PricingDataRequest) returns (PricingDataResponse) {
    option (google.api.http) = {
      get: "/flux/pricing-data"
    };
  }

  // Post email or phone in exchange for a one time passcode
  //
  // Will cause your email or phone to receive a one time passcode.
  // This can be used in the verify step to obtain a token for login
  rpc OneTimePasscode(OneTimePasscodeRequest) returns (OneTimePasscodeResponse) {
    option (google.api.http) = {
      post: "/flux/auth/one-time-passcode"
      body: "*"
    };
  }

  // Post one time passcode in exchange for an access token
  //
  // The passcode received in either email or phone text message should be provided here in order to obtain on access token
  rpc OneTimePasscodeVerify(OneTimePasscodeVerifyRequest) returns (OneTimePasscodeVerifyResponse) {
    option (google.api.http) = {
      post: "/flux/auth/one-time-passcode-verify"
      body: "*"
    };
  }

  // Post chosen bank info from plaid in order to create a new ACH pyment method in wyre
  //
  // requires a plaid processor token which in turn requires a plaid widget interaction where the user selects the account id
  rpc WyreAddBankPaymentMethod(WyreAddBankPaymentMethodRequest) returns (WyreAddBankPaymentMethodResponse) {
    option (google.api.http) = {
      post: "/wyre/add-bank-payment-method"
      body: "*"
    };
  }
}