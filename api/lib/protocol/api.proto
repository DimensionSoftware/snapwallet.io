syntax = "proto3";
option go_package = "github.com/khoerling/flux/api/lib/protocol";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "google/protobuf/empty.proto";

// OrganizationApplication
message OrganizationApplication {
  string id = 1;
  string name = 2;
}

// User
//
// A user which is shared across customer applications
message User {
  string id = 1;
  string email = 2;
  string phone = 3;
  int64 created_at = 4;
}

// UserFlags
//
// hints for the ui
message UserFlags {
  bool has_plaid_items = 1;
  bool has_wyre_account_prerequisites_met = 2;
  bool has_wyre_account = 3;
  bool has_wyre_payment_methods = 4;
}

// Organization
//
// an organization containing users, a user is one to many to organizations
message Organization {
  string id = 1;
  string name = 2;
  repeated User users = 3;
  repeated OrganizationApplication applications = 4;
}

// Address
//
// A user's residential address which belongs to the profile (they can have many.)
message Address {
  string id = 1;
  string street_1 = 2;
  string street_2 = 3;
  string city = 4;
  string state = 5; // (ISO 3166-1 - Alpha 2)
  string postal_code = 6;
  string country = 7; // (ISO 2)
}

// PaymentMethod
//
// A third party user account payment method (ACH, SEPA, Debit Card, Credit Card, etc.)
message PaymentMethod {
  string id = 1;
  string external_id = 2;
  string type = 3;
  string status = 4;
}

// ViewerDataRequest
//
// request
message ViewerDataRequest {}

// ViewerDataResponse
//
// response
message ViewerDataResponse {
  User user = 1;
  UserFlags flags = 2;
}

// PricingDataRequest
//
// request
message PricingDataRequest {}

// PricingRate
//
// the pricing rate map; the keys are currency symbols and the values are the rates
message PricingRate {
  map<string,double> rate = 1;
}

// PricingDataResponse
//
// response
message PricingDataResponse {
  map<string,PricingRate> rates = 1;
}

// OneTimePasscodeRequest
//
// request
message OneTimePasscodeRequest {
  string email_or_phone = 1;
}

// OneTimePasscodeResponse
//
// response
message OneTimePasscodeResponse {}

// OneTimePasscodeVerifyRequest
//
// request
message OneTimePasscodeVerifyRequest {
  string email_or_phone = 1;
  string code = 2;
}

// OneTimePasscodeVerifyResponse
//
// response
message OneTimePasscodeVerifyResponse {
  TokenMaterial tokens = 1;
  User user = 2;
}

message TokenMaterial {
  string refresh_token = 1;
  string access_token = 2;
}


// PlaidConnectBankAccountsRequest
//
// request
message PlaidConnectBankAccountsRequest {
  string plaid_public_token = 1;
  repeated string plaid_account_ids = 2;
}

// PlaidConnectBankAccountsResponse
//
// response
message PlaidConnectBankAccountsResponse {
}

// PlaidCreateLinkTokenRequest
//
// request can be empty since the link token is correlated with the Bearer token passed
message PlaidCreateLinkTokenRequest {

}

// PlaidCreateLinkTokenResponse
//
// response
message PlaidCreateLinkTokenResponse {
  string link_token = 1;
}

// SaveProfileDataRequest
//
// request
message SaveProfileDataRequest {
  string legal_name = 1;
  string date_of_birth = 2;
  string ssn = 3;
  Address address = 4;
  UsGovernmentIdDocumentInput us_government_id_doc = 5;
  DocumentInput proof_of_address_doc = 6;
  DocumentInput ach_authorization_form_doc = 7;
}

message DocumentInput {
  repeated string file_ids = 1;
}

message UsGovernmentIdDocumentInput {
  UsGovernmentIdDocumentInputKind kind = 1;
  repeated string                 file_ids = 2;
}

// ProfileData
//
// represents all profile data for a user
message ProfileDataInfo {
  repeated ProfileDataItemInfo profile = 1;
  repeated ProfileDataItemRemediation remediations = 2;
  ThirdPartyUserAccount wyre = 3;
}

enum LifecycleStatus {
  L_UNKNOWN = 0;
  L_PENDING = 1;
  L_CREATED = 2;
  L_ERROR = 3;
}

// WyreUserAccount
//
// Represents the wyre user account status (or other tps)
message ThirdPartyUserAccount {
  LifecycleStatus lifecyle_status = 1;
  string status = 2;
}

// UserAccountRemediation
//
// Represents an action that the client 
// must take in order to resolve a condition.
message ProfileDataItemRemediation {
  ProfileDataItemKind kind = 1;
  string note = 2;
}

// ProfileDataInfo
//
// represents a saved profile data fields' status
message ProfileDataItemInfo {
  string                id = 1;
  repeated string       file_ids = 2;
  ProfileDataItemKind   kind = 3;
  string                sub_kind = 4;
  ProfileDataItemStatus status = 5;
  int32                 length = 6;
  string                created_at = 7;
  string                updated_at = 8;
  string                sealed_at = 9;
}

enum ProfileDataItemKind {
  K_UNKNOWN = 0;
  K_LEGAL_NAME = 1;
  K_PHONE = 2;
  K_EMAIL = 3;
  K_ADDRESS = 4;
  K_DATE_OF_BIRTH = 5;
  K_US_SSN = 6;
  K_US_GOVERNMENT_ID_DOC = 7;
  K_PROOF_OF_ADDRESS_DOC = 8;
  K_ACH_AUTHORIZATION_FORM_DOC = 9;
}

enum ProfileDataItemStatus {
  S_UNKNOWN = 0;
  S_RECEIVED = 1;
  S_PENDING = 2;
  S_INVALID = 3;
  S_APPROVED = 4;
}

enum UsGovernmentIdDocumentInputKind {
  GI_UNKNOWN = 0;
  GI_US_DRIVING_LICENSE = 1;
  GI_US_PASSPORT_CARD = 2;
  GI_US_GOVERNMENT_ID = 3;
  GI_US_PASSPORT = 4;
}

message ChangeViewerEmailRequest {
  string code = 1;
  string email = 2;
}

message ChangeViewerPhoneRequest {
  string code = 1;
  string phone = 2;
}

message UploadFileRequest {
  string filename = 1;
  string mime_type = 2;
  int32 size = 3;
  bytes body = 4;
}

message UploadFileResponse {
  string file_id = 1;
  int32 size = 2;
}

enum ImageProcessingMode {
  IP_FIT = 0;
  IP_RESIZE = 1;
}

message GetImageRequest {
  string file_id = 1;
  ImageProcessingMode processingMode = 2;
  int32 width = 3;
  int32 height = 4;
}

message GetImageResponse {
  string filename = 1;
  string mime_type = 2;
  int32 size = 3;
  bytes body = 4;
  int32 width = 5;
  int32 height = 6;
}


message WyreWebhookRequest {
  string hook_id = 1;
  string subscription_id = 2;
  string trigger = 3;
}

message TokenExchangeRequest {
  string refresh_token = 1;
}

message TokenExchangeResponse {
  TokenMaterial tokens = 1;
}

message WyrePaymentMethod {
  LifecycleStatus lifecyle_status = 1;
  string id = 2;
  string status = 3;
  string name = 4;
  string last4 = 5;
  repeated string chargeable_currencies = 6;
  repeated string depositable_currencies = 7;
}

message WyreWalletOrderReservationQuote {
  string sourceCurrency = 1;
  double sourceAmount = 2;
  double sourceAmountWithoutFees = 3;
  string destCurrency = 4;
  double destAmount = 5;
  double exchangeRate = 6;
  map<string, double> equivelancies = 7;
  map<string, double> fees = 8;
}

message WyreWalletOrderReservation {
  int64 amount = 1;
	bool amountIncludesFees = 2;
	repeated string lockFields = 3;
	string paymentMethod = 4;
	string referenceId = 5;
	bool quoteLockRequest = 6;
  WyreWalletOrderReservationQuote quote = 7;
}



message WyrePaymentMethods {
  repeated WyrePaymentMethod payment_methods = 1;
}

message WyreCreateTransferRequest {
  string source = 1;
  string dest = 2;
  string dest_currency = 3;
  oneof amount {
    double source_amount = 4;
    double dest_amount = 5;
  }
}

message WyreConfirmTransferRequest {
  string transfer_id = 1;
}
message WyreGetTransferRequest {
  string transfer_id = 1;
}

message WyreGetTransfersRequest {
  int64 page = 1;
}

message WyreGetDebitCardOrderAuthorizationsRequest {
  string order_id = 1;
}

message WyreCreateDebitCardOrderRequest {
  string dest = 1;
  string source_currency = 2;
  string dest_currency = 3;
  double source_amount = 4;
  bool amount_includes_fees = 6;
  repeated string lockFields = 7;
  WyreDebitCardInfo card = 10;
}

message WyreDebitCardInfo {
  string first_name = 1;
  string last_name = 2;
  string phone_number = 3;
  string number = 4;
  string expiration_month = 5;
  string expiration_year = 6;
  string verification_code = 7;
  Address address = 8;
}

message WyreTransfer {
  string id = 1;
  string source = 2;
  string dest = 3;
  string source_currency = 4;
  string dest_currency = 5;
  double source_amount = 6;
  double dest_amount = 7;
  string source_name = 8;
  string dest_name = 9;
  string message = 10;
  double exchange_rate = 11;
  map<string, double> fees = 12;
  string blockchainTxId = 13;
  string status = 14;
  string created_at = 15;
  string closed_at = 16;
}

message WyreTransferDetail {
  string id = 1;
  string source = 2;
  string dest = 3;
  string source_currency = 4;
  string dest_currency = 5;
  double source_amount = 6;
  double dest_amount = 7;
  string message = 8;
  double exchange_rate = 9;
  map<string, double> fees = 10;
  double total_fees = 11;
  string blockhash = 12;
  string network_tx_id = 13;
  string status = 14;
  string created_at = 15;
  string expires_at = 16;
  string completed_at = 17;
  string cancelled_at = 18;
}

message WyreTransfers {
  repeated WyreTransfer transfers = 1;
}

message SnapWidgetWallet {
  string asset = 1;
  string address = 2;
}

message SnapWidgetProduct {
  string image_URL = 1;
  string video_URL = 2;
  double destination_amount = 3;
  string destination_ticker = 4;
  string destination_address = 5;
  string title = 6;
  string author = 7;
}

message SnapWidgetConfig {
  string app_name = 1;
  repeated SnapWidgetWallet wallets = 2;
  string intent = 3;
  bool focus = 4;
  map<string,string> theme = 5;
  SnapWidgetProduct product = 6;
}

message WidgetGetShortUrlResponse {
  string url = 1;
}

message WyreGetDebitCardOrderAuthorizationsResponse {
  string wallet_order_id = 1;
  bool sms_needed = 2;
  bool card2faNeeded = 3;
  string authorization_3ds_url = 4;
}

message WyreCreateDebitCardOrderResponse {
  string reservation = 1;
  string orderId = 2;
  string status = 3;
  string transferId = 4;
  WyreWalletOrderReservationQuote quote = 5;
}

message GotoRequest {
  string id = 1;
}

message GotoResponse {
  string location = 1;
}

service Flux {
  // Get viewer data
  //
  // Provides user (viewer) data associated with the access token
  rpc ViewerData(google.protobuf.Empty) returns (ViewerDataResponse) {
    option (google.api.http) = {
      get: "/viewer"
    };
  }

  // Get viewer profile data
  //
  // Provides user (viewer) data associated with the access token
  rpc ViewerProfileData(google.protobuf.Empty) returns (ProfileDataInfo) {
    option (google.api.http) = {
      get: "/viewer/profile"
    };
  }

  // Change users email (viewer based on jwt)
  //
  // requires an otp code and the desired email address change
  rpc ChangeViewerEmail(ChangeViewerEmailRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/viewer/email"
      body: "*"
    };
  }

  // Change users phone (viewer based on jwt)
  //
  // requires an otp code and the desired phone change
  rpc ChangeViewerPhone(ChangeViewerPhoneRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/viewer/phone"
      body: "*"
    };
  }

  // Get pricing data
  //
  // Provides pricing data for all markets with rate maps
  rpc PricingData(PricingDataRequest) returns (PricingDataResponse) {
    option (google.api.http) = {
      get: "/flux/pricing-data"
    };
  }

  // Post email or phone in exchange for a one time passcode
  //
  // Will cause your email or phone to receive a one time passcode.
  // This can be used in the verify step to obtain a token for login
  rpc OneTimePasscode(OneTimePasscodeRequest) returns (OneTimePasscodeResponse) {
    option (google.api.http) = {
      post: "/flux/auth/one-time-passcode"
      body: "*"
    };
  }

  // Post one time passcode in exchange for an access token
  //
  // The passcode received in either email or phone text message should be provided here in order to obtain on access token
  rpc OneTimePasscodeVerify(OneTimePasscodeVerifyRequest) returns (OneTimePasscodeVerifyResponse) {
    option (google.api.http) = {
      post: "/flux/auth/one-time-passcode-verify"
      body: "*"
    };
  }

  // Exchange a refresh token for new token material; refresh tokens can only be used once
  // If refresh tokens are used more than once RTR dictates that any access tokens which were created by it should be immediately revoked
  // this is because this indicates an attack (something is wrong)
  rpc TokenExchange(TokenExchangeRequest) returns (TokenExchangeResponse) {
    option (google.api.http) = {
      post: "/flux/auth/token"
      body: "*"
    };
  }

  // Post chosen bank info from plaid in order to create a new ACH pyment method in wyre
  //
  // requires a plaid processor token which in turn requires a plaid widget interaction where the user selects the account id
  rpc PlaidConnectBankAccounts(PlaidConnectBankAccountsRequest) returns (PlaidConnectBankAccountsResponse) {
    option (google.api.http) = {
      post: "/plaid/connect-bank-accounts"
      body: "*"
    };
  }

  // PlaidCreateLinkToken implements the link flow
 
  // https://plaid.com/docs/link/link-token-migration-guide/
  rpc PlaidCreateLinkToken(PlaidCreateLinkTokenRequest) returns (PlaidCreateLinkTokenResponse) {
    option (google.api.http) = {
      post: "/plaid/create-link-token"
      body: "*"
    };
  }

  // SaveProfileData saves profile data items for the user
  //
  // ...
  rpc SaveProfileData(SaveProfileDataRequest) returns (ProfileDataInfo) {
    option (google.api.http) = {
      patch: "/viewer/profile"
      body: "*"
    };
  }

  rpc WyreWebhook(WyreWebhookRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/wyre/hooks/{hook_id}"
      body: "*"
    };
  }

  rpc WyreGetPaymentMethods(google.protobuf.Empty) returns (WyrePaymentMethods) {
    option (google.api.http) = {
      get: "/wyre/payment-methods"
    };
  }

  rpc WyreCreateTransfer(WyreCreateTransferRequest) returns (WyreTransferDetail) {
    option (google.api.http) = {
      post: "/wyre/transfers"
      body: "*"
    };
  }

  rpc WyreConfirmTransfer(WyreConfirmTransferRequest) returns (WyreTransferDetail) {
    option (google.api.http) = {
      post: "/wyre/transfers/{transfer_id}/confirm"
      body: "*"
    };
  }

  rpc WyreGetTransfer(WyreGetTransferRequest) returns (WyreTransferDetail) {
    option (google.api.http) = {
      get: "/wyre/transfers/{transfer_id}"
    };
  }

  rpc WyreGetTransfers(WyreGetTransfersRequest) returns (WyreTransfers) {
    option (google.api.http) = {
      get: "/wyre/transfers"
    };
  }

  rpc WyreCreateWalletOrderReservation(WyreCreateDebitCardOrderRequest) returns (WyreCreateDebitCardOrderResponse) {
    option (google.api.http) = {
      post: "/wyre/transfers/debit-card"
      body: "*"
    };
  }

  rpc WyreGetWalletOrderAuthorizations(WyreGetDebitCardOrderAuthorizationsRequest) returns (WyreGetDebitCardOrderAuthorizationsResponse) {
    option (google.api.http) = {
      post: "/wyre/transfers/debit-card/auth"
      body: "*"
    };
  }

  rpc WidgetGetShortUrl(SnapWidgetConfig) returns (WidgetGetShortUrlResponse) {
    option (google.api.http) = {
      post: "/widget/short-url"
      body: "*"
    };
  }

  // UploadFile uploads a file and returns a file id
  //
  // ...
  rpc UploadFile(UploadFileRequest) returns (UploadFileResponse) {}

  // GetImage returns an image with optionally specified resize proportions
  //
  // The image is reference via a file ID; the blob data will be returned as well as the mimetype and size.
  //
  // If the file is not of an image mime type, you will get an InvalidArguments error
  rpc GetImage(GetImageRequest) returns (GetImageResponse) {}

  rpc Goto(GotoRequest) returns (GotoResponse) {}
}
