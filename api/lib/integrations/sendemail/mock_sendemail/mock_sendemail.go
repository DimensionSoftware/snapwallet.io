// Code generated by MockGen. DO NOT EDIT.
// Source: lib/integrations/sendemail/sendemail.go

// Package mock_sendemail is a generated GoMock package.
package mock_sendemail

import (
	gomock "github.com/golang/mock/gomock"
	rest "github.com/sendgrid/rest"
	mail "github.com/sendgrid/sendgrid-go/helpers/mail"
	reflect "reflect"
)

// MockSendEmail is a mock of SendEmail interface
type MockSendEmail struct {
	ctrl     *gomock.Controller
	recorder *MockSendEmailMockRecorder
}

// MockSendEmailMockRecorder is the mock recorder for MockSendEmail
type MockSendEmailMockRecorder struct {
	mock *MockSendEmail
}

// NewMockSendEmail creates a new mock instance
func NewMockSendEmail(ctrl *gomock.Controller) *MockSendEmail {
	mock := &MockSendEmail{ctrl: ctrl}
	mock.recorder = &MockSendEmailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSendEmail) EXPECT() *MockSendEmailMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockSendEmail) Send(email *mail.SGMailV3) (*rest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", email)
	ret0, _ := ret[0].(*rest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockSendEmailMockRecorder) Send(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendEmail)(nil).Send), email)
}
