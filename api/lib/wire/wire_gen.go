// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package wire

import (
	"github.com/khoerling/flux/api/lib/auth"
	"github.com/khoerling/flux/api/lib/db"
	"github.com/khoerling/flux/api/lib/encryption"
	"github.com/khoerling/flux/api/lib/filemanager"
	"github.com/khoerling/flux/api/lib/integrations/cloudstorage"
	"github.com/khoerling/flux/api/lib/integrations/firestore"
	"github.com/khoerling/flux/api/lib/integrations/plaid"
	"github.com/khoerling/flux/api/lib/integrations/sendgrid"
	"github.com/khoerling/flux/api/lib/integrations/twilio"
	"github.com/khoerling/flux/api/lib/integrations/wyre"
	"github.com/khoerling/flux/api/lib/server"
	plaid2 "github.com/plaid/plaid-go/plaid"
)

// Injectors from wire.go:

// InitializeServer creates the main server container
func InitializeServer() (server.Server, error) {
	sendAPIKey, err := sendgrid.ProvideSendClientAPIKey()
	if err != nil {
		return server.Server{}, err
	}
	client := sendgrid.ProvideSendClient(sendAPIKey)
	config, err := twilio.ProvideTwilioConfig()
	if err != nil {
		return server.Server{}, err
	}
	gotwilioTwilio := twilio.ProvideTwilio(config)
	fireProjectID, err := firestore.ProvideFirestoreProjectID()
	if err != nil {
		return server.Server{}, err
	}
	firestoreClient, err := firestore.ProvideFirestore(fireProjectID)
	if err != nil {
		return server.Server{}, err
	}
	bucketHandle, err := cloudstorage.ProvideBucket()
	if err != nil {
		return server.Server{}, err
	}
	encryptionConfig, err := encryption.ProvideConfig()
	if err != nil {
		return server.Server{}, err
	}
	manager, err := encryption.NewManager(encryptionConfig)
	if err != nil {
		return server.Server{}, err
	}
	dbDb := &db.Db{
		Firestore:         firestoreClient,
		EncryptionManager: manager,
	}
	filemanagerManager := &filemanager.Manager{
		BucketHandle:      bucketHandle,
		Db:                dbDb,
		EncryptionManager: manager,
	}
	wyreConfig, err := wyre.ProvideWyreConfig()
	if err != nil {
		return server.Server{}, err
	}
	wyreClient := wyre.NewClient(wyreConfig)
	apiHost, err := wyre.ProvideAPIHost()
	if err != nil {
		return server.Server{}, err
	}
	wyreManager := &wyre.Manager{
		APIHost: apiHost,
		Wyre:    wyreClient,
		Db:      dbDb,
	}
	clientOptions, err := plaid.ProvideClientOptions()
	if err != nil {
		return server.Server{}, err
	}
	plaidClient, err := plaid2.NewClient(clientOptions)
	if err != nil {
		return server.Server{}, err
	}
	privateKey, err := auth.ProvideJwtPrivateKey()
	if err != nil {
		return server.Server{}, err
	}
	jwtSigner := auth.JwtSigner{
		PrivateKey: privateKey,
	}
	publicKey := auth.ProvideJwtPublicKey(privateKey)
	jwtVerifier := auth.JwtVerifier{
		PublicKey: publicKey,
	}
	db2 := db.Db{
		Firestore:         firestoreClient,
		EncryptionManager: manager,
	}
	serverServer := server.ProvideServer(client, gotwilioTwilio, config, firestoreClient, filemanagerManager, wyreClient, wyreManager, plaidClient, jwtSigner, jwtVerifier, db2)
	return serverServer, nil
}
