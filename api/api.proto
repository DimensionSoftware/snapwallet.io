syntax = "proto3";

// Application
message Application {
  int64 id = 1;
  string name = 2;
}

// A user's KYC profile (they should only have one of these)
message KYCProfile {
  int64 id = 1;
  string given_name = 2;
  string family_name = 3;
  string date_of_birth = 4; // (YYYY-MM-DD)
  string social_security_number = 5;  // (XXX-XX-XXX for US users only)
  repeated Address addresses = 6;
  repeated ThirdPartyUserAccount third_party_user_accounts = 7;
}

// A user which is shared across customer applications
message User {
  int64 id = 1;
  string email = 2;
  string phone = 3;
  KYCProfile kyc_profile = 4;
  repeated Organization organizations = 5;
}

// an organization containing users, a user is one to many to organizations
message Organization {
  int64 id = 1;
  string name = 2;
  repeated User users = 3;
  repeated Application applications = 4;
}

//  An object representing the user's account at a third party API
message ThirdPartyUserAccount {
  int64 id = 1;
  string partner_id = 2; // (an identifier for the third party API)
  string external_id = 3; // (an identifier for the account in the third party system)
  string credential_id = 4; // (an identifier for the user's third party credentials when available. this maps to KMS?)
  string status = 5;
  repeated PaymentMethod = 6;
}

// A user's residential address which belongs to the profile (they can have many.)
message Address {
  int64 id = 1;
  bool is_default = 2;
  string street_1 = 3;
  string street_2 = 4;
  string city = 5;
  string state = 6; // (ISO 3166-1 - Alpha 2)
  string postal_code = 7;
  string country = 8; // (ISO 2)
}

//  A third party user account payment method (ACH, SEPA, Debit Card, Credit Card, etc.)
message PaymentMethod {
  int64 id = 1;
  string external_id = 2;
  string type = 3;
  string status = 4;
}


service SearchService {
  // assume token will be embedded, hence arguments are not needed
  rpc UserData() returns (User);
}